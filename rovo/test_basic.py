#!/usr/bin/env python3
"""
Basic test for ROVO Browser Agent
"""
import asyncio
import sys
import os

async def test_imports():
    """Test if all modules can be imported"""
    print("üß™ Testing imports...")
    
    try:
        from config import Config
        print("‚úÖ Config import successful")
        
        from browser_manager import BrowserManager
        print("‚úÖ BrowserManager import successful")
        
        from agent_tools import NavigationTool, ElementDetectionTool
        print("‚úÖ Agent tools import successful")
        
        from agents import BrowserAgents, BrowserCrew
        print("‚úÖ Agents import successful")
        
        from main import RovoBrowserAgent
        print("‚úÖ Main application import successful")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Import error: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Unexpected error: {e}")
        return False

async def test_config():
    """Test configuration loading"""
    print("\nüß™ Testing configuration...")
    
    try:
        config = Config()
        
        # Test basic config values
        assert config.get('headless') is not None
        assert config.get('browser_type') == 'chromium'
        assert config.get('viewport_width') == 1280
        
        print("‚úÖ Configuration loading successful")
        print(f"   - Headless: {config.get('headless')}")
        print(f"   - Browser: {config.get('browser_type')}")
        print(f"   - Viewport: {config.get('viewport_width')}x{config.get('viewport_height')}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Configuration error: {e}")
        return False

async def test_browser_manager():
    """Test browser manager initialization"""
    print("\nüß™ Testing browser manager...")
    
    try:
        from config import Config
        from browser_manager import BrowserManager
        
        config = Config()
        browser_manager = BrowserManager(config)
        
        print("‚úÖ BrowserManager initialization successful")
        print(f"   - Config loaded: {type(config).__name__}")
        print(f"   - Manager created: {type(browser_manager).__name__}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå BrowserManager error: {e}")
        return False

async def test_agents():
    """Test agent creation"""
    print("\nüß™ Testing agent creation...")
    
    try:
        from config import Config
        from browser_manager import BrowserManager
        from agents import BrowserAgents, BrowserCrew
        
        config = Config()
        browser_manager = BrowserManager(config)
        
        # Test agent factory
        agents_factory = BrowserAgents(browser_manager, config)
        print("‚úÖ BrowserAgents factory created")
        
        # Test crew creation
        crew = BrowserCrew(browser_manager, config)
        print("‚úÖ BrowserCrew created")
        
        # Test agent creation
        navigator = agents_factory.create_navigation_agent()
        detector = agents_factory.create_element_detection_agent()
        
        print(f"‚úÖ Agents created successfully")
        print(f"   - Navigator: {navigator.role}")
        print(f"   - Detector: {detector.role}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Agents error: {e}")
        return False

async def test_main_app():
    """Test main application initialization"""
    print("\nüß™ Testing main application...")
    
    try:
        from main import RovoBrowserAgent
        
        # Create agent (don't start browser)
        agent = RovoBrowserAgent()
        
        print("‚úÖ RovoBrowserAgent created successfully")
        print(f"   - Config: {type(agent.config).__name__}")
        print(f"   - Browser Manager: {type(agent.browser_manager).__name__}")
        print(f"   - Running: {agent.running}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Main application error: {e}")
        return False

async def main():
    """Run all tests"""
    print("üöÄ ROVO Browser Agent - Basic Tests")
    print("=" * 50)
    
    tests = [
        test_imports,
        test_config,
        test_browser_manager,
        test_agents,
        test_main_app
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            result = await test()
            if result:
                passed += 1
        except Exception as e:
            print(f"‚ùå Test failed with exception: {e}")
    
    print("\n" + "=" * 50)
    print(f"üìä Test Results: {passed}/{total} passed")
    
    if passed == total:
        print("üéâ All tests passed! ROVO Browser Agent is ready to use.")
        print("\nNext steps:")
        print("1. Copy .env.sample to .env")
        print("2. Add your GOOGLE_API_KEY to .env")
        print("3. Run: ./setup.sh")
        print("4. Run: ./run.sh")
    else:
        print("‚ùå Some tests failed. Please check the errors above.")
        return 1
    
    return 0

if __name__ == "__main__":
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except Exception as e:
        print(f"‚ùå Test runner error: {e}")
        sys.exit(1)